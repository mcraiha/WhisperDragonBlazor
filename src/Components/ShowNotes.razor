@inject IJSRuntime JS

@if (notes == null || notes.Count < 1)
{
	<p>No notes</p>
}
else
{
<input type='text' @bind="@SearchFilter" placeholder="Filter, press Enter to apply" />
@if (!string.IsNullOrEmpty(searchFilter))
{
	<br>
	<p>Filter is matching @filteredNotes.Count / @notes.Count </p>
}
<table id="notes">
	<thead>
		<tr>
			<th>
				Secure
			</th>
			<th>
				Title
			</th>
			<th>
				Text
			</th>
			<th>
				Created
			</th>
			<th>
				Modified
			</th>
			<th>
				Actions
			</th>
		</tr>
	</thead>

	<tbody>
		@foreach (var item in filteredNotes)
        {
			int indexToHandle = item.zeroBasedIndexNumber;
			<tr>
				<th>
					@if (item.IsSecure == true)
					{
						@CommonIcons.secureIcon
					}
					else
					{
						@CommonIcons.unsecureIcon
					}
				</th>
				<th>
					@item.Title <a title="Copy title" @onclick="() => CallTitleCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Text <a title="Copy text" @onclick="() => CallTextCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.CreationTime
				</th>
				<th>
					@item.ModificationTime
				</th>
				<th>
					<a title="Edit note" @onclick="() => CallEdit(indexToHandle)">Edit üñäÔ∏è</a> | <a title="Delete note" @onclick="() => CallDelete(indexToHandle)">Delete üóëÔ∏è</a>
				</th>
			</tr>
        }
	</tbody>
</table>
}
<br>

<button title="Add note" @onclick="AddNoteCallback">+ Add</button>
@code {
    [Parameter, EditorRequired]
    public Task<NoteSimplified[]> Notes { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<MouseEventArgs> AddNoteCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> EditNoteCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> DeleteNoteCallback { get; set; }

	private IReadOnlyList<NoteSimplified> notes { get; set; }
	private IReadOnlyList<NoteSimplified> filteredNotes { get; set; }

	private static readonly StringComparison searchComparison = StringComparison.OrdinalIgnoreCase;
	private string searchFilter = "";
	private string SearchFilter 
	{ 
		get
		{
			return this.searchFilter;
		} 
		set
		{
			this.searchFilter = value;
			if (string.IsNullOrEmpty(this.searchFilter))
			{
				this.filteredNotes = this.notes;
			}
			else
			{
				this.filteredNotes = this.notes.Where(x => x.Title.Contains(this.searchFilter, searchComparison) || x.Text.Contains(this.searchFilter, searchComparison)).ToList();
			}
		} 
	}

	protected override async Task OnInitializedAsync()
	{
		this.notes = await Notes;
		this.filteredNotes = this.notes;
	}

	// Copy to clipboard methods
	private async Task CallTitleCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", notes[zeroBasedIndexNumber].Title);
	}

	private async Task CallTextCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", notes[zeroBasedIndexNumber].Text);
	}

	// Edit method
	private async Task CallEdit(int zeroBasedIndexNumber)
	{
		await EditNoteCallback.InvokeAsync(zeroBasedIndexNumber);
	}

	// Delete method
	private async Task CallDelete(int zeroBasedIndexNumber)
	{
		await DeleteNoteCallback.InvokeAsync(zeroBasedIndexNumber);
	}
}