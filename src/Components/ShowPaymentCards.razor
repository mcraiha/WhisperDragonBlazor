@inject IJSRuntime JS

@if (PaymentCards == null || paymentCards.Count < 1)
{
	<p>No payment cards</p>
}
else
{
<input type='text' @bind="@SearchFilter" placeholder="Filter, press Enter to apply" />
@if (!string.IsNullOrEmpty(searchFilter))
{
	<br>
	<p>Filter is matching @filteredPaymentCards.Count / @paymentCards.Count </p>
}

<table id="paymentcards">
	<thead>
		<tr>
			<th>
				Secure
			</th>
			<th>
				Title
			</th>
			<th>
				Name on the card
			</th>
            <th>
				Card type
			</th>
            <th>
				Number
			</th>
            <th>
				Security code
			</th>
			<th>
				Created
			</th>
			<th>
				Modified
			</th>
			<th>
				Actions
			</th>
		</tr>
	</thead>

	<tbody>
		@foreach (var item in filteredPaymentCards)
        {
			int indexToHandle = item.zeroBasedIndexNumber;
			bool isSecure = item.IsSecure;
			<tr>
				<th>
					@if (isSecure == true)
					{
						@CommonIcons.secureIcon
					}
					else
					{
						@CommonIcons.unsecureIcon
					}
				</th>
				<th>
					@item.Title <a title="Copy title" @onclick="() => CallTitleCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.NameOnTheCard <a title="Copy name on the card" @onclick="() => CallNameOnTheCardCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
                <th>
					@item.CardType
				</th>
                <th>
					@item.Number <a title="Copy number" @onclick="() => CallNumberCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
                <th>
					@item.SecurityCode <a title="Copy security code" @onclick="() => CallSecurityCodeCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					<a title="Delete payment card" @onclick="() => CallDelete(indexToHandle, isSecure)">üóëÔ∏è</a>
				</th>
			</tr>
        }
	</tbody>
</table>
}
<br>

<button title="Add payment card" @onclick="AddPaymentCardCallback">+ Add</button>
@code {
    [Parameter, EditorRequired]
    public Task<PaymentCardSimplified[]> PaymentCards { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<MouseEventArgs> AddPaymentCardCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<(int, bool)> EditPaymentCardCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<(int, bool)> DeletePaymentCardCallback { get; set; }

	private IReadOnlyList<PaymentCardSimplified> paymentCards { get; set; }
	private IReadOnlyList<PaymentCardSimplified> filteredPaymentCards { get; set; }

	private static readonly StringComparison searchComparison = StringComparison.OrdinalIgnoreCase;
	private string searchFilter = "";
	private string SearchFilter 
	{ 
		get
		{
			return this.searchFilter;
		} 
		set
		{
			this.searchFilter = value;
			if (string.IsNullOrEmpty(this.searchFilter))
			{
				this.filteredPaymentCards = this.paymentCards;
			}
			else
			{
				this.filteredPaymentCards = this.paymentCards.Where(x => x.Title.Contains(this.searchFilter, searchComparison) || x.NameOnTheCard.Contains(this.searchFilter, searchComparison) || x.Number.Contains(this.searchFilter, searchComparison) || x.SecurityCode.Contains(this.searchFilter, searchComparison)).ToList();
			}
			
		} 
	}

	protected override async Task OnInitializedAsync()
	{
		this.paymentCards = await PaymentCards;
		this.filteredPaymentCards = this.paymentCards;
	}

	// Copy to clipboard methods
	private async Task CallTitleCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", paymentCards[zeroBasedIndexNumber].Title);
	}

	private async Task CallNameOnTheCardCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", paymentCards[zeroBasedIndexNumber].NameOnTheCard);
	}

	private async Task CallNumberCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", paymentCards[zeroBasedIndexNumber].Number);
	}

	private async Task CallSecurityCodeCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", paymentCards[zeroBasedIndexNumber].SecurityCode);
	}

	// Delete method
	private async Task CallDelete(int zeroBasedIndexNumber, bool isSecure)
	{
		await DeletePaymentCardCallback.InvokeAsync((zeroBasedIndexNumber, isSecure));
	}
}