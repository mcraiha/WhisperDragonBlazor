@inject IJSRuntime JS

<table id="paymentcards">
	<thead>
		<tr>
			<th>
				Secure
			</th>
			<th>
				Title
			</th>
			<th>
				Name on the card
			</th>
            <th>
				Card type
			</th>
            <th>
				Number
			</th>
            <th>
				Security code
			</th>
			<th>
				Actions
			</th>
		</tr>
	</thead>

	<tbody>
		@foreach (var item in PaymentCards)
        {
			int indexToHandle = item.zeroBasedIndexNumber;
			<tr>
				<th>
					@if (item.IsSecure == true)
					{
						@CommonIcons.secureIcon
					}
					else
					{
						@CommonIcons.unsecureIcon
					}
				</th>
				<th>
					@item.Title <a title="Copy title" @onclick="() => CallTitleCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.NameOnTheCard <a title="Copy name on the card" @onclick="() => CallNameOnTheCardCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
                <th>
					@item.CardType
				</th>
                <th>
					@item.Number <a title="Copy number" @onclick="() => CallNumberCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
                <th>
					@item.SecurityCode <a title="Copy security code" @onclick="() => CallSecurityCodeCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					<a title="Delete" @onclick="() => CallDelete(indexToHandle)">üóëÔ∏è</a>
				</th>
			</tr>
        }
	</tbody>
</table>

<br>

<button title="Add payment card" @onclick="AddPaymentCardCallback">+ Add</button>
@code {
    [Parameter, EditorRequired]
    public IReadOnlyList<PaymentCardSimplified> PaymentCards { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<MouseEventArgs> AddPaymentCardCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> DeleteLoginCallback { get; set; }

	// Copy to clipboard methods
	private async Task CallTitleCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", PaymentCards[zeroBasedIndexNumber].Title);
	}

	private async Task CallNameOnTheCardCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", PaymentCards[zeroBasedIndexNumber].NameOnTheCard);
	}

	private async Task CallNumberCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", PaymentCards[zeroBasedIndexNumber].Number);
	}

	private async Task CallSecurityCodeCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", PaymentCards[zeroBasedIndexNumber].SecurityCode);
	}

	// Delete method
	private async Task CallDelete(int zeroBasedIndexNumber)
	{
		await DeleteLoginCallback.InvokeAsync(zeroBasedIndexNumber);
	}
}