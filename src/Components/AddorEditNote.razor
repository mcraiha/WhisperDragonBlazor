<section>
    @if (DebugEnabled)
	{
	<p><a @onclick="DebugFillValues">ðŸ”¥ Debug fill ðŸ”¥</a></p>
	}
    <form>

        @if (note != null)
        {
            <header>Edit note</header>
        }
        else
        {
            <header>Add note</header>
        }
        
        <label for="issecure">Is secure @if (IsSecure) {@CommonIcons.secureIcon} else {@CommonIcons.unsecureIcon}</label>
		<input type="checkbox" id="issecure" @bind="@IsSecure">
        <br>
        @if (IsSecure)
        {
            <select @bind="KeyIdentifier">
				@foreach (string keyIdentifier in PossibleKeyIdentifiers)
                {
                    <option value="@keyIdentifier">@keyIdentifier</option>
                }
			</select>
            <br>
        }
		
		<label for="notetitle">Note title</label>
		<input type="text" id="notetitle" @bind="@NoteTitle" placeholder="Title for the note">
		<br>
        <label for="notetext">Note text</label>
        <textarea id="notetext" @bind="@NoteText" rows="20" placeholder="Text for the note"></textarea>
        <br>
        <br>
        
        @if (note != null)
        {
            <button type="button" id="cancelEdit" @onclick="OnCancelEditCallback">Cancel</button> 
            <button type="button" id="editnote" @onclick="TryToEditNote">Save changes</button>
        }
        else
        {
            <button type="button" id="cancelAdd" @onclick="OnCancelAddCallback">Cancel</button> 
            <button type="button" id="addnote" @onclick="TryToAddNote">Add note</button>
        }
    </form>
</section>

@code {
    [Parameter]
    public Note note { get; set; }

    [Parameter, EditorRequired]
    public ISecurityAsyncFunctions SecurityAsyncFunctions { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<string> PossibleKeyIdentifiers { get; set; }

    [Parameter]
    public EventCallback<Note> OnAddCallback { get; set; }

    [Parameter]
    public EventCallback<(Note, string)> OnAddSecretCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnEditedCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelAddCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelEditCallback { get; set; }

    [Parameter]
    public bool IsSecure { get; set; } = true;

    public string KeyIdentifier { get; set; } = "";

    public string NoteTitle { get; set; } = "";

    public string NoteText { get; set; } = "";

    protected override void OnInitialized()
	{
        if (this.note != null)
        {
            this.NoteTitle = note.GetNoteTitle();
            this.NoteText = note.GetNoteText();
        }
	}

    /// <summary>
    /// When user adds new note
    /// </summary>
    /// <returns></returns>
    private async Task TryToAddNote()
    {
        Note newNote = await Note.CreateNoteAsync(this.NoteTitle, this.NoteText, this.SecurityAsyncFunctions);

        // New note (either secret or not)
        if (IsSecure)
        {
            await OnAddSecretCallback.InvokeAsync((newNote, KeyIdentifier));
        }
        else
        {
            await OnAddCallback.InvokeAsync(newNote);
        }
    }

    /// <summary>
    /// When user saves changes to existing note
    /// </summary>
    /// <returns></returns>
    private async Task TryToEditNote()
    {
        await this.note.UpdateNoteAsync(this.NoteTitle, this.NoteText, this.SecurityAsyncFunctions);
        await OnEditedCallback.InvokeAsync();
    }

    #if DEBUG

	private const bool DebugEnabled = true;

	private void DebugFillValues()
	{
		this.NoteTitle = "Shopping list";
		this.NoteText = "Buy milk, butter, mustard, chocolate, paper and flowers";
	}

	#else

	private const bool DebugEnabled = false;

	#endif // DEBUG
}