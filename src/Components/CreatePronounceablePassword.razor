@inject IJSRuntime JS

<section>
    <form>
        <header>Generate Pronounceable password</header>

        <label for="passwordlength">Password length</label>
        <input type="number" id="passwordlength" @bind="@HowManyWords" min="1" max="10">
		<br>

		<label for="startwithuppercase">Start with Upper-case (e.g. A, C, K or Z)</label>
		<input type="checkbox" id="startwithuppercase" @bind="@StartWithUpperCase">
		<br>

		<label for="includenumber">Include number (e.g. 1, 15 or 76)</label>
		<input type="checkbox" id="includenumber" @bind="@IncludeNumbers">
		<br>

		<label for="includespecialcharacter">Include special character</label>
		<input type="checkbox" id="includespecialcharacter" @bind="@IncludeSpecialCharSimple">
		<br>
		<br>

		<label for="generatedpronounceablepassword">Generated password</label>
		<input type="text" id="generatedpronounceablepassword" @bind="@GeneratedPassword" readonly>
		<br>

		<label for="visiblepassword">Visible</label>
		<input type="checkbox" id="visiblepassword" @bind="@VisiblePassword">
		<br>
		<button type="button" id="copytoclipboardbutton" disabled="@(string.IsNullOrEmpty(generatedPassword) ? true : false)" @onclick="CallPasswordCopy">Copy to Clipboard</button> <button type="button" id="generatepronounceablepasswordbutton" @onclick="GeneratePassword">Generate</button>

    </form>
</section>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnOkCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelCallback { get; set; }

    private int HowManyWords { get; set; } = 2;

	private bool StartWithUpperCase { get; set; } = true;

	private bool IncludeNumbers { get; set; } = true;

	private bool IncludeSpecialCharSimple { get; set; } = true;

    private bool visiblePassword = true;
	public bool VisiblePassword 
	{ 
		get
		{
			return this.visiblePassword;
		}
		
		set
		{
			this.visiblePassword = value;
			// Update to cause onpropertychange
			GeneratedPassword = generatedPassword;
		} 
	}

    private string generatedPassword = "";
	public string GeneratedPassword 
	{ 
		get
		{
			if (VisiblePassword)
			{
				return this.generatedPassword;
			}
			
			return string.Create(this.generatedPassword.Length, '*', (chars, buf) => {
    																	for (int i=0;i<chars.Length;i++) chars[i] = buf;
					});
		}
		set         
		{
			this.generatedPassword = value;
		}
	}

    private void GeneratePassword()
    {
        GeneratedPassword = GeneratePronounceablePassword.Generate(HowManyWords, StartWithUpperCase, IncludeNumbers, IncludeSpecialCharSimple);
    }

	// Copy to clipboard methods
	private async Task CallPasswordCopy()
	{
		await JS.InvokeVoidAsync("copyToClipboard", generatedPassword);
	}
}