@inject IJSRuntime JS

<section>
    <form>
        <header>Generate Pronounceable password</header>

        <label for="passwordlength">Password length</label>
        <input type="number" id="passwordlength" @bind="@HowManyWords" min="1" max="10">
		<br>

		<label for="startwithuppercase">Start with Upper-case (e.g. A, C, K or Z)</label>
		<input type="checkbox" id="startwithuppercase" @bind="@StartWithUpperCase">
		<br>

		<label for="includenumber">Include number (e.g. 1, 15 or 76)</label>
		<input type="checkbox" id="includenumber" @bind="@IncludeNumbers">
		<br>

		<label for="includespecialcharacter">Include special character</label>
		<input type="checkbox" id="includespecialcharacter" @bind="@IncludeSpecialCharSimple">
		<br>
		<br>

		<label for="generatedpronounceablepassword">Generated password</label>
		<input type="text" id="generatedpronounceablepassword" @bind="@GeneratedPronounceablePassword" readonly>
		<br>

		<label for="visiblepassword">Visible</label>
		<input type="checkbox" id="visiblepassword" @bind="@VisiblePassword">
		<br>
		<button type="button" id="copytoclipboardbutton" disabled="@(string.IsNullOrEmpty(generatedPronounceablePassword) ? true : false)" @onclick="CallPasswordCopy">Copy to Clipboard</button> <button type="button" id="generatepronounceablepasswordbutton" @onclick="GeneratePronounceablePassword">Generate</button>

    </form>
</section>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnOkCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelCallback { get; set; }

    private int HowManyWords { get; set; } = 2;

	private bool StartWithUpperCase { get; set; } = true;

	private bool IncludeNumbers { get; set; } = true;

	private bool IncludeSpecialCharSimple { get; set; } = true;

    private bool visiblePassword = true;
	public bool VisiblePassword 
	{ 
		get
		{
			return this.visiblePassword;
		}
		
		set
		{
			this.visiblePassword = value;
			// Update to cause onpropertychange
			GeneratedPronounceablePassword = generatedPronounceablePassword;
		} 
	}

    private string generatedPronounceablePassword = "";
	public string GeneratedPronounceablePassword 
	{ 
		get
		{
			if (VisiblePassword)
			{
				return this.generatedPronounceablePassword;
			}
			
			return string.Create(this.generatedPronounceablePassword.Length, '*', (chars, buf) => {
    																	for (int i=0;i<chars.Length;i++) chars[i] = buf;
					});
		}
		set         
		{
			this.generatedPronounceablePassword = value;
		}
	}

    private void GeneratePronounceablePassword()
    {
        List<string> commonWords = EmbedResourceLoader.ReadAsList(languageToCommonWords[0].Item2);

        string currentPronounceablePassword = "";

        int wordCount = HowManyWords; 

        using (var generator = RandomNumberGenerator.Create())
        {
            int bigIndex = GetPositiveRandomInt(generator);
            int smallIndex = bigIndex % commonWords.Count;

            string firstWord = commonWords[smallIndex];

            if (StartWithUpperCase)
            {
                firstWord = char.ToUpper(firstWord[0]) + firstWord.Substring(1);
            }

            currentPronounceablePassword = firstWord;

            for (int i = 1; i < wordCount; i++)
            {
                bigIndex = GetPositiveRandomInt(generator);
                smallIndex = bigIndex % commonWords.Count;
                string tempWord = commonWords[smallIndex];

                currentPronounceablePassword += tempWord;
            }

            if (IncludeNumbers)
            {
                bigIndex = GetPositiveRandomInt(generator);
                smallIndex = bigIndex % 99;
                currentPronounceablePassword += smallIndex;
            }

            if (IncludeSpecialCharSimple)
            {
                int index = GetPositiveRandomInt(generator) % specialCharactersPronounceable.Count;
                currentPronounceablePassword += specialCharactersPronounceable[index];
            }		
        }

        GeneratedPronounceablePassword = currentPronounceablePassword;
    }

    private static int GetPositiveRandomInt(RandomNumberGenerator rng)
	{
		int returnValue = -1;

		byte[] byteArray = new byte[4];

		while (returnValue < 0)
		{
			rng.GetBytes(byteArray);
			returnValue = BitConverter.ToInt32(byteArray, 0);
		}

		return returnValue;
	}

    private static readonly List<char> specialCharactersPronounceable = new List<char>()
	{
		'!', '#', '$', '%', '*', '+', '-', '.', '?', '@', '_',
	};

    private static readonly List<(string, string)> languageToCommonWords = new List<(string, string)>()
	{
		("English", "CommonWords/English-Common.txt")
	};

	// Copy to clipboard methods
	private async Task CallPasswordCopy()
	{
		await JS.InvokeVoidAsync("copyToClipboard", generatedPronounceablePassword);
	}
}