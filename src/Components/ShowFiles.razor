@inject IJSRuntime JS

@if (Files == null || Files.Count < 1)
{
	<p>No files</p>
}
else
{
<input type='text' @bind="@SearchFilter" placeholder="Filter, press Enter to apply" />
@if (!string.IsNullOrEmpty(searchFilter))
{
	<br>
	<p>Filter is matching @FilteredFiles.Count / @Files.Count </p>
}

<table id="files">
	<thead>
		<tr>
			<th>
				Secure
			</th>
			<th>
				Filename
			</th>
			<th>
				File size
			</th>
            <th>
				File type
			</th>
			<th>
				Actions
			</th>
		</tr>
	</thead>

	<tbody>
		@foreach (var item in FilteredFiles)
        {
			int indexToHandle = item.zeroBasedIndexNumber;
			<tr>
				<th>
					@if (item.IsSecure == true)
					{
						@CommonIcons.secureIcon
					}
					else
					{
						@CommonIcons.unsecureIcon
					}
				</th>
				<th>
					@item.Filename <a title="Copy filename" @onclick="() => CallFilenameCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Filesize
				</th>
                <th>
					@item.Filetype
				</th>
				<th>
					<a title="Delete" @onclick="() => CallDelete(indexToHandle)">üóëÔ∏è</a>
				</th>
			</tr>
        }
	</tbody>
</table>
}
<br>

<button title="Add file" @onclick="AddFileCallback">+ Add</button>
@code {
    [Parameter, EditorRequired]
    public IReadOnlyList<FileSimplified> Files { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<MouseEventArgs> AddFileCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> DeleteFileCallback { get; set; }

	private IReadOnlyList<FileSimplified> FilteredFiles { get; set; }

	private static readonly StringComparison searchComparison = StringComparison.OrdinalIgnoreCase;
	private string searchFilter = "";
	private string SearchFilter 
	{ 
		get
		{
			return this.searchFilter;
		} 
		set
		{
			this.searchFilter = value;
			if (string.IsNullOrEmpty(this.searchFilter))
			{
				this.FilteredFiles = this.Files;
			}
			else
			{
				this.FilteredFiles = this.Files.Where(x => x.Filename.Contains(this.searchFilter, searchComparison)).ToList();
			}
			
		} 
	}

	protected override void OnInitialized()
	{
		this.FilteredFiles = this.Files;
	}

	// Copy to clipboard methods
	private async Task CallFilenameCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", Files[zeroBasedIndexNumber].Filename);
	}

	// Delete method
	private async Task CallDelete(int zeroBasedIndexNumber)
	{
		await DeleteFileCallback.InvokeAsync(zeroBasedIndexNumber);
	}
}