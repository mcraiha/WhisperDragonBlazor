@inject IJSRuntime JS

<section>
	<form>
		<header>Generate random password</header>

		<label for="passwordlength">Password length</label>
		<input type="number" id="passwordlength" @bind="@PasswordLength" min="1" max="1024">
		<br>

		<label for="useuppercase">Upper-case latin characters (e.g. A, C, K, Z)</label>
		<input type="checkbox" id="useuppercase" @bind="@IncludeUpperCaseLatinLetters">
		<br>

		<label for="uselowercase">Lower-case latin characters (e.g. a, c, k, z)</label>
		<input type="checkbox" id="uselowercase" @bind="@IncludeLowerCaseLatinLetters">
		<br>

		<label for="usedigits">Digits (e.g. 4, 6, 9)</label>
		<input type="checkbox" id="usedigits" @bind="@IncludeDigits">
		<br>

		<label for="usespecialsascii">Special characters ASCII (!"#$%&amp;'()*+,-./:;&lt;=&gt;?&#64;[\]^_`{|}~)</label>
		<input type="checkbox" id="usespecialsascii" @bind="@IncludeSpecialCharactersASCII">
		<br>

		<label for="useemojis">Basic emoji (e.g. ðŸ˜Š)</label>
		<input type="checkbox" id="useemojis" @bind="@IncludeEmojis">
		<br>
		<br>

		<label for="generatedpassword">Generated password</label>
		<input type="text" id="generatedpassword" @bind="@GeneratedPassword" readonly>
		<br>

		<label for="visiblepassword">Visible</label>
		<input type="checkbox" id="visiblepassword" @bind="@VisiblePassword">
		<br>
		<button type="button" id="copytoclipboardbutton" disabled="@(string.IsNullOrEmpty(generatedPassword) ? true : false)" @onclick="CallPasswordCopy">Copy to Clipboard</button> <button type="button" id="generatepasswordbutton" disabled="@GenerateDisabled()" @onclick="GeneratePassword">Generate</button>

	</form>
</section>

@code {
	[Parameter]
	public EventCallback<MouseEventArgs> OnOkCallback { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> OnCancelCallback { get; set; }

	public int PasswordLength { get; set; } = 16;

	public bool IncludeUpperCaseLatinLetters { get; set; } = true;

	public bool IncludeLowerCaseLatinLetters { get; set; } = true;

	public bool IncludeDigits { get; set; } = true;

	public bool IncludeSpecialCharactersASCII { get; set; } = true;

	public bool IncludeEmojis { get; set; } = false;

	private bool visiblePassword = true;
	public bool VisiblePassword 
	{ 
		get
		{
			return this.visiblePassword;
		}
		
		set
		{
			this.visiblePassword = value;
			// Update to cause onpropertychange
			GeneratedPassword = generatedPassword;
		} 
	}

	private string generatedPassword = "";
	public string GeneratedPassword 
	{ 
		get
		{
			if (VisiblePassword)
			{
				return this.generatedPassword;
			}
			
			return string.Create(this.generatedPassword.Length, '*', (chars, buf) => {
																		for (int i=0; i< chars.Length; i++) chars[i] = buf;
					});
		}
		set         
		{
			this.generatedPassword = value;
		}
	}

   
	private void GeneratePassword()
	{
		GeneratedPassword = GenerateRandomPassword.Generate(PasswordLength, IncludeUpperCaseLatinLetters, IncludeLowerCaseLatinLetters, IncludeDigits, IncludeSpecialCharactersASCII, IncludeEmojis);
	}

	private bool GenerateDisabled()
	{
		bool buttonEnabled = (PasswordLength > 0) && (IncludeUpperCaseLatinLetters || IncludeLowerCaseLatinLetters || IncludeDigits || IncludeSpecialCharactersASCII || IncludeEmojis);
		return !buttonEnabled;
	}
   

	// Copy to clipboard methods
	private async Task CallPasswordCopy()
	{
		await JS.InvokeVoidAsync("copyToClipboard", generatedPassword);
	}
}