<section>
    <form>
        <header>Generate random password</header>

        <label for="passwordlength">Password length</label>
        <input type="number" id="passwordlength" @bind="@PasswordLength" min="1" max="1024">
		<br>

		<label for="useuppercase">Upper-case latin characters (e.g. A, C, K, Z)</label>
		<input type="checkbox" id="useuppercase" @bind="@IncludeUpperCaseLatinLetters">
		<br>

		<label for="uselowercase">Lower-case latin characters (e.g. a, c, k, z)</label>
		<input type="checkbox" id="uselowercase" @bind="@IncludeLowerCaseLatinLetters">
		<br>

		<label for="usedigits">Digits (e.g. 4, 6, 9)</label>
		<input type="checkbox" id="usedigits" @bind="@IncludeDigits">
		<br>

		<label for="usespecialsascii">Special characters ASCII (!"#$%&amp;'()*+,-./:;&lt;=&gt;?&#64;[\]^_`{|}~)</label>
		<input type="checkbox" id="usespecialsascii" @bind="@IncludeSpecialCharactersASCII">
		<br>

		<label for="useemojis">Basic emoji (e.g. ðŸ˜Š)</label>
		<input type="checkbox" id="useemojis" @bind="@IncludeEmojis">
		<br>
		<br>

		<label for="generatedpassword">Generated password</label>
		<input type="text" id="generatedpassword" @bind="@GeneratedPassword" readonly>
		<br>

		<label for="visiblepassword">Visible</label>
		<input type="checkbox" id="visiblepassword" @bind="@VisiblePassword">
		<br>
		<button type="button" id="copytoclipboardbutton">Copy to Clipboard</button> <button type="button" id="generatepasswordbutton" @onclick="GenerateRandomPassword">Generate</button>

    </form>
</section>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnOkCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelCallback { get; set; }

    public int PasswordLength { get; set; } = 16;

    public bool IncludeUpperCaseLatinLetters { get; set; } = true;

	public bool IncludeLowerCaseLatinLetters { get; set; } = true;

	public bool IncludeDigits { get; set; } = true;

	public bool IncludeSpecialCharactersASCII { get; set; } = true;

	public bool IncludeEmojis { get; set; } = false;

    private bool visiblePassword = true;
	public bool VisiblePassword 
	{ 
		get
		{
			return this.visiblePassword;
		}
		
		set
		{
			this.visiblePassword = value;
			// Update to cause onpropertychange
			GeneratedPassword = generatedPassword;
		} 
	}

    private string generatedPassword = "";
	public string GeneratedPassword 
	{ 
		get
		{
			if (VisiblePassword)
			{
				return this.generatedPassword;
			}
			
			return string.Create(this.generatedPassword.Length, '*', (chars, buf) => {
    																	for (int i=0; i< chars.Length; i++) chars[i] = buf;
					});
		}
		set         
		{
			this.generatedPassword = value;
		}
	}

    private static readonly List<char> upperCaseLatinLetters = new List<char>()
	{
		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
	};

	private static readonly List<char> lowerCaseLatinLetters = new List<char>()
	{
		'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
	};

	private static readonly List<char> digits = new List<char>()
	{
		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
	};

	private static readonly List<char> specialCharactersASCII = new List<char>()
	{
		'!', '"', '#', '$', '%', '\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~'
	};

	private static readonly List<char> specialCharactersPronounceable = new List<char>()
	{
		'!', '#', '$', '%', '*', '+', '-', '.', '?', '@', '_',
	};

    // Generated during runtime in ConstructEmojiList(), See https://en.wikipedia.org/wiki/Emoticons_(Unicode_block)
	private static readonly List<string> emoticonsUnicodeBlock = new List<string>();

    private void GenerateRandomPassword()
    {
        List<string> generated = new List<string>(PasswordLength);

        List<string> possibleChars = new List<string>();

        using (var generator = RandomNumberGenerator.Create())
        {
            if (IncludeUpperCaseLatinLetters)
            {
                int index = GetPositiveRandomInt(generator) % upperCaseLatinLetters.Count;
                generated.Add(upperCaseLatinLetters[index].ToString());
                possibleChars.AddRange(Array.ConvertAll<char, string>(upperCaseLatinLetters.ToArray(), element => element.ToString()));
            }

            if (IncludeLowerCaseLatinLetters)
            {
                int index = GetPositiveRandomInt(generator) % lowerCaseLatinLetters.Count;
                generated.Add(lowerCaseLatinLetters[index].ToString());
                possibleChars.AddRange(Array.ConvertAll<char, string>(lowerCaseLatinLetters.ToArray(), element => element.ToString()));
            }

            if (IncludeDigits)
            {
                int index = GetPositiveRandomInt(generator) % digits.Count;
                generated.Add(digits[index].ToString());
                possibleChars.AddRange(Array.ConvertAll<char, string>(digits.ToArray(), element => element.ToString()));
            }

            if (IncludeSpecialCharactersASCII)
            {
                int index = GetPositiveRandomInt(generator) % specialCharactersASCII.Count;
                generated.Add(specialCharactersASCII[index].ToString());
                possibleChars.AddRange(Array.ConvertAll<char, string>(specialCharactersASCII.ToArray(), element => element.ToString()));
            }

            if (IncludeEmojis)
            {
                if (emoticonsUnicodeBlock.Count < 1)
                {
                    ConstructEmojiList();
                }

                int index = GetPositiveRandomInt(generator) % emoticonsUnicodeBlock.Count;
                generated.Add(emoticonsUnicodeBlock[index]);
                possibleChars.AddRange(emoticonsUnicodeBlock);
            }

            // Reorder all possible chars
            possibleChars = possibleChars.OrderBy(x => GetPositiveRandomInt(generator)).ToList();

            while (generated.Count < PasswordLength)
            {
                int index = GetPositiveRandomInt(generator) % possibleChars.Count;
                generated.Add(possibleChars[index]);
            }

            // Reorder all generated chars
            generated = generated.OrderBy(x => GetPositiveRandomInt(generator)).ToList();
        }

        GeneratedPassword = string.Join("", generated); //  new String( generated.ToArray());
    }

    private static int GetPositiveRandomInt(RandomNumberGenerator rng)
	{
		int returnValue = -1;

		byte[] byteArray = new byte[4];

		while (returnValue < 0)
		{
			rng.GetBytes(byteArray);
			returnValue = BitConverter.ToInt32(byteArray, 0);
		}

		return returnValue;
	}

    private static void ConstructEmojiList()
	{
		int startValue = 0x1F600;
		emoticonsUnicodeBlock.Add(Char.ConvertFromUtf32(startValue));
		for (int i = 0; i < 80; i++)
		{
			startValue++;
			emoticonsUnicodeBlock.Add(Char.ConvertFromUtf32(startValue));
		}
	}
}