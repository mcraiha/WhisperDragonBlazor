@inject IJSRuntime JS

<table id="logins">
	<thead>
		<tr>
			<th>
				Secure
			</th>
			<th>
				Title
			</th>
			<th>
				Address / URL
			</th>
			<th>
				Email
			</th>
			<th>
				Username
			</th>
			<th>
				Password
			</th>
			<th>
				Category
			</th>
			<th>
				Tags
			</th>
			<th>
				Actions
			</th>
		</tr>
	</thead>

	<tbody>
		@foreach (var item in Logins)
        {
			int indexToHandle = item.zeroBasedIndexNumber;
			<tr>
				<th>
					@if (item.IsSecure == true)
					{
						@CommonIcons.secureIcon
					}
					else
					{
						@CommonIcons.unsecureIcon
					}
				</th>
				<th>
					@item.Title <a title="Copy title" @onclick="() => CallTitleCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.URL <a title="Copy URL" @onclick="() => CallURLCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Email <a title="Copy email" @onclick="() => CallEmailCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Username <a title="Copy username" @onclick="() => CallUsernameCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Password <a title="Copy password" @onclick="() => CallPasswordCopy(indexToHandle)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Category
				</th>
				<th>
					@item.Tags
				</th>
				<th>
					<a title="Delete" @onclick="() => CallDelete(indexToHandle)">üóëÔ∏è</a>
				</th>
			</tr>
        }
	</tbody>
</table>

<br>

<button title="Add login information" @onclick="AddLoginCallback">+ Add</button>
@code {
    [Parameter, EditorRequired]
    public IReadOnlyList<LoginSimplified> Logins { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<MouseEventArgs> AddLoginCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> DeleteLoginCallback { get; set; }

	private async Task CallTitleCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", Logins[zeroBasedIndexNumber].Title);
	}

	private async Task CallURLCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", Logins[zeroBasedIndexNumber].URL);
	}

	private async Task CallEmailCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", Logins[zeroBasedIndexNumber].Email);
	}

	private async Task CallUsernameCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", Logins[zeroBasedIndexNumber].Username);
	}

	private async Task CallPasswordCopy(int zeroBasedIndexNumber)
	{
		await JS.InvokeVoidAsync("copyToClipboard", Logins[zeroBasedIndexNumber].Password);
	}

	private async Task CallDelete(int zeroBasedIndexNumber)
	{
		await DeleteLoginCallback.InvokeAsync(zeroBasedIndexNumber);
	}
}