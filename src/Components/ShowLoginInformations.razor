@inject IJSRuntime JS

@if (logins == null || logins.Count < 1)
{
	<p>No login informations</p>
}
else
{
<input type='text' @bind="@SearchFilter" placeholder="Filter, press Enter to apply" />
@if (!string.IsNullOrEmpty(searchFilter))
{
	<br>
	<p>Filter is matching @filteredLogins.Count / @logins.Count </p>
}

<table id="logins">
	<thead>
		<tr>
			<th>
				Secure
			</th>
			<th>
				Title
			</th>
			<th>
				Address / URL
			</th>
			<th>
				Email
			</th>
			<th>
				Username
			</th>
			<th>
				Password
			</th>
			<th>
				Category
			</th>
			<th>
				Tags
			</th>
			<th>
				Created
			</th>
			<th>
				Modified
			</th>
			<th>
				Actions
			</th>
		</tr>
	</thead>

	<tbody>
		
		@foreach (var item in filteredLogins)
        {
			int indexToHandle = item.zeroBasedIndexNumber;
			bool isSecure = item.IsSecure;
			<tr>
				<th>
					@if (isSecure == true)
					{
						@CommonIcons.secureIcon
					}
					else
					{
						@CommonIcons.unsecureIcon
					}
				</th>
				<th>
					@item.Title <a title="Copy title" @onclick="() => CallTitleCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					<a target="_blank" rel="noopener noreferrer" href="@item.URL">@item.URL</a> <a title="Copy URL" @onclick="() => CallURLCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Email <a title="Copy email" @onclick="() => CallEmailCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Username <a title="Copy username" @onclick="() => CallUsernameCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Password <a title="Copy password" @onclick="() => CallPasswordCopy(indexToHandle, isSecure)">‚úÇÔ∏è</a>
				</th>
				<th>
					@item.Category
				</th>
				<th>
					@item.Tags
				</th>
				<th>
					@item.CreationTime
				</th>
				<th>
					@item.ModificationTime
				</th>
				<th>
					<a title="Delete login" @onclick="() => CallDelete(indexToHandle, isSecure)">üóëÔ∏è</a>
				</th>
			</tr>
        }
	</tbody>
</table>
}
<br>

<button title="Add login information" @onclick="AddLoginCallback">+ Add</button>
@code {
    [Parameter, EditorRequired]
    public Task<LoginSimplified[]> Logins { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<MouseEventArgs> AddLoginCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<(int, bool)> EditLoginCallback { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<(int, bool)> DeleteLoginCallback { get; set; }

	private IReadOnlyList<LoginSimplified> logins { get; set; }
	private IReadOnlyList<LoginSimplified> filteredLogins { get; set; }

	private static readonly StringComparison searchComparison = StringComparison.OrdinalIgnoreCase;
	private string searchFilter = "";
	private string SearchFilter 
	{ 
		get
		{
			return this.searchFilter;
		} 
		set
		{
			this.searchFilter = value;
			if (string.IsNullOrEmpty(this.searchFilter))
			{
				this.filteredLogins = this.logins;
			}
			else
			{
				this.filteredLogins = this.logins.Where(x => x.Title.Contains(this.searchFilter, searchComparison) || x.URL.Contains(this.searchFilter, searchComparison) || x.Email.Contains(this.searchFilter, searchComparison) || x.Username.Contains(this.searchFilter, searchComparison)).ToList();
			}
			
		} 
	}

	protected override async Task OnInitializedAsync()
	{
		this.logins = await Logins;
		this.filteredLogins = this.logins;
	}

	// Copy to clipboard methods
	private async Task CallTitleCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", logins[zeroBasedIndexNumber].Title);
	}

	private async Task CallURLCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", logins[zeroBasedIndexNumber].URL);
	}

	private async Task CallEmailCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", logins[zeroBasedIndexNumber].Email);
	}

	private async Task CallUsernameCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", logins[zeroBasedIndexNumber].Username);
	}

	private async Task CallPasswordCopy(int zeroBasedIndexNumber, bool isSecure)
	{
		await JS.InvokeVoidAsync("copyToClipboard", logins[zeroBasedIndexNumber].Password);
	}

	// Delete method
	private async Task CallDelete(int zeroBasedIndexNumber, bool isSecure)
	{
		await DeleteLoginCallback.InvokeAsync((zeroBasedIndexNumber, isSecure));
	}
}