@page "/"
@inject IJSRuntime JS

@if (visibleElement == VisibleElement.NewAndOpenWizard)
{
	<NewOrOpenWizard OnNewClickCallback="@CreateNewContainer" OnOpenClickCallback="@OpenExistingContainer" OnGeneratePasswordsCallback="@ShowPasswordCreators" />
}
else if (visibleElement == VisibleElement.CreateNewCommonSecretsContainer)
{
	<CreateNewCommonSecretsContainer OnCancelClickCallback="@CancelNewCommonSecretsContainerCreation" OnCreateClickCallback="@CreateNewCommonSecretsContainer" SecurityAsyncFunctions="@securityAsyncFunctions" />
}
else if (visibleElement == VisibleElement.ShowPasswordCreators)
{
	<CreatePasswordSelectionNav BackCallback="@BackFromPasswordCreators" />
}
else if (visibleElement == VisibleElement.ShowLoginInformations)
{
	<CommonSecretsTopNav OnLoginsClickCallback="@TopNavShowLoginInformations" OnNotesClickCallback="@TopNavShowNotes" OnFilesClickCallback="@TopNavShowFiles" OnContactsClickCallback="@TopNavShowContacts" OnPaymentCardsClickCallback="@TopNavShowPaymentCards"
		loginsCount="@logins.Count" notesCount="@this.csc.notes.Count" filesCount="@files.Count" contactsCount="@contacts.Count" paymentCardsCount="@paymentCards.Count" />
	<ShowLoginInformations Logins="@logins" AddLoginCallback="@ShowAddLoginInformation" DeleteLoginCallback="@DeleteLoginInformationConfirmation" />
}
else if (visibleElement == VisibleElement.ShowNotes)
{
	<CommonSecretsTopNav OnLoginsClickCallback="@TopNavShowLoginInformations" OnNotesClickCallback="@TopNavShowNotes" OnFilesClickCallback="@TopNavShowFiles" OnContactsClickCallback="@TopNavShowContacts" OnPaymentCardsClickCallback="@TopNavShowPaymentCards" 
		loginsCount="@logins.Count" notesCount="@csc.notes.Count" filesCount="@files.Count" contactsCount="@contacts.Count" paymentCardsCount="@paymentCards.Count" />
	<ShowNotes Notes="@NoteSimplified.CreateNoteSimplifieds(csc.notes)" AddNoteCallback="@ShowAddNote" DeleteLoginCallback="@DeleteNoteConfirmation" />
}
else if (visibleElement == VisibleElement.ShowFiles)
{
	<CommonSecretsTopNav OnLoginsClickCallback="@TopNavShowLoginInformations" OnNotesClickCallback="@TopNavShowNotes" OnFilesClickCallback="@TopNavShowFiles" OnContactsClickCallback="@TopNavShowContacts" OnPaymentCardsClickCallback="@TopNavShowPaymentCards" 
		loginsCount="@logins.Count" notesCount="@this.csc.notes.Count" filesCount="@files.Count" contactsCount="@contacts.Count" paymentCardsCount="@paymentCards.Count" />
	<ShowFiles Files="@files" AddFileCallback="@ShowAddFile" DeleteLoginCallback="@DeleteFileConfirmation" />
}
else if (visibleElement == VisibleElement.ShowContacts)
{
	<CommonSecretsTopNav OnLoginsClickCallback="@TopNavShowLoginInformations" OnNotesClickCallback="@TopNavShowNotes" OnFilesClickCallback="@TopNavShowFiles" OnContactsClickCallback="@TopNavShowContacts" OnPaymentCardsClickCallback="@TopNavShowPaymentCards" 
		loginsCount="@logins.Count" notesCount="@this.csc.notes.Count" filesCount="@files.Count" contactsCount="@contacts.Count" paymentCardsCount="@paymentCards.Count" />
	<ShowContacts Contacts="@contacts" AddContactCallback="@ShowAddContact" DeleteLoginCallback="@DeleteContactConfirmation" />
}
else if (visibleElement == VisibleElement.ShowPaymentCards)
{
	<CommonSecretsTopNav OnLoginsClickCallback="@TopNavShowLoginInformations" OnNotesClickCallback="@TopNavShowNotes" OnFilesClickCallback="@TopNavShowFiles" OnContactsClickCallback="@TopNavShowContacts" OnPaymentCardsClickCallback="@TopNavShowPaymentCards" 
		loginsCount="@logins.Count" notesCount="@this.csc.notes.Count" filesCount="@files.Count" contactsCount="@contacts.Count" paymentCardsCount="@paymentCards.Count" />
	<ShowPaymentCards PaymentCards="@paymentCards" AddPaymentCardCallback="@ShowAddPaymentCard" DeleteLoginCallback="@DeletePaymentCardConfirmation" />
}
else if (visibleElement == VisibleElement.AddLoginInformation)
{
	<AddOrEditLoginInformation OnAddCallback="@AddLoginInformation" OnCancelCallback="@CancelAddLoginInformation" />
}
else if (visibleElement == VisibleElement.AddNote)
{
	<AddOrEditNote SecurityAsyncFunctions="@securityAsyncFunctions" PossibleKeyIdentifiers="@GetKeyIdentifiers()" OnAddCallback="@AddNote" OnCancelCallback="@CancelAddNote" />
}
else if (visibleElement == VisibleElement.AddFile)
{
	<AddOrEditFile OnAddCallback="@AddFile" OnCancelCallback="@CancelAddFile" />
}
else if (visibleElement == VisibleElement.AddContact)
{
	<AddOrEditContact OnAddCallback="@AddContact" OnCancelCallback="@CancelAddContact" />
}
else if (visibleElement == VisibleElement.AddPaymentCard)
{
	<AddOrEditPaymentCard OnAddCallback="@AddPaymentCard" OnCancelCallback="@CancelAddPaymentCard" />
}
else if (visibleElement == VisibleElement.EditLoginInformation)
{
	<AddOrEditLoginInformation OnAddCallback="@AddLoginInformation" OnCancelCallback="@CancelAddLoginInformation" />
}
else if (visibleElement == VisibleElement.EditNote)
{
	<AddOrEditNote SecurityAsyncFunctions="@securityAsyncFunctions" PossibleKeyIdentifiers="@GetKeyIdentifiers()" OnEditedCallback="@EditedNote" OnCancelCallback="@CancelAddNote" />
}
else if (visibleElement == VisibleElement.EditFile)
{
	<AddOrEditFile OnAddCallback="@AddFile" OnCancelCallback="@CancelAddFile" />
}
else if (visibleElement == VisibleElement.EditContact)
{
	<AddOrEditContact OnAddCallback="@AddContact" OnCancelCallback="@CancelAddContact" />
}
else if (visibleElement == VisibleElement.EditPaymentCard)
{
	<AddOrEditPaymentCard OnAddCallback="@AddPaymentCard" OnCancelCallback="@CancelAddPaymentCard" />
}
else if (visibleElement == VisibleElement.DeleteItemConfirmation)
{
	<DeleteItemConfirmation OnDeleteClickCallback="@deleteActualAction" OnCancelClickCallback="@deleteCancelAction" WhatToDelete="@whatToDelete" />
}
else
{
	<p>Should not be visible!</p>
}


@code {

	public enum VisibleElement
	{
		NewAndOpenWizard,
		
		CreateNewCommonSecretsContainer,
		OpenExistingCommonSecretsContainer,
		
		ShowPasswordCreators,
		
		ShowLoginInformations,
		ShowNotes,
		ShowFiles,
		ShowContacts,
		ShowPaymentCards,
		
		AddLoginInformation,
		AddNote,
		AddFile,
		AddContact,
		AddPaymentCard,

		EditLoginInformation,
		EditNote,
		EditFile,
		EditContact,
		EditPaymentCard,

		DeleteItemConfirmation,
	}

	public enum ItemType
	{
		None = 0,
		LoginInformationSecret,
		LoginInformation,

		FileSecret,
		File,

		NoteSecret,
		Note,

		ContactSecret,
		Contact,

		PaymentCardSecret,
		PaymentCard
	}

	private VisibleElement visibleElement = VisibleElement.NewAndOpenWizard;

	private SecurityAsyncFunctions securityAsyncFunctions = null;

	/// <summary>
	/// Our current common secrets container reference
	/// </summary>
	private CommonSecretsContainer csc = null;

	/// <summary>
	/// Is CommonSecretsContainer modified
	/// </summary>
	private bool isModified = false;

	/// <summary>
	/// Because we do not want to store actual passwords in memory, keep collection of derived ones (TODO: encrypt at some point)
	/// </summary>
	/// <typeparam name="string">Key Identifier</typeparam>
	/// <typeparam name="byte[]">Derived password as bytes</typeparam>
	private readonly Dictionary<string, byte[]> derivedPasswords = new Dictionary<string, byte[]>();

	private List<LoginSimplified> logins = new List<LoginSimplified>();

	private List<FileSimplified> files = new List<FileSimplified>();

	private List<ContactSimplified> contacts = new List<ContactSimplified>();

	private List<PaymentCardSimplified> paymentCards = new List<PaymentCardSimplified>();

	// Delete related
	private ItemType deleteType = ItemType.None;
	private int deleteIndex = -1;
	private Action<MouseEventArgs> deleteCancelAction;
	private Action<MouseEventArgs> deleteActualAction;
	private string whatToDelete = "";

	protected override void OnInitialized()
	{
		this.securityAsyncFunctions = new SecurityAsyncFunctions(JS);
	}

	// Wizard
	private void CreateNewContainer(MouseEventArgs e)
	{
		visibleElement = VisibleElement.CreateNewCommonSecretsContainer;
	}

	private void OpenExistingContainer(MouseEventArgs e)
	{
		//visibleElement = VisibleElement.OpenExistingCommonSecretsContainer;

		logins = new List<LoginSimplified>() 
		{
			new LoginSimplified() 
			{
				zeroBasedIndexNumber = 0,
				IsSecure = true,
				Title = "Fake service",
				URL = "https://fakeservice.com",
				Email = "sample@email.com",
				Username = "Dragon",
				Password = "gwWTY#Â¤&%36",
				Category = "Samples",
				Tags = "Samples Demo",
			},
			new LoginSimplified() 
			{
				zeroBasedIndexNumber = 1,
				IsSecure = false,
				Title = "Fake mail",
				URL = "https://fakemail.com",
				Email = "sample@email.com",
				Username = "Dragon",
				Password = "Si0bSww5bYeKp7Rs",
				Category = "Samples",
				Tags = "Samples Demo",
			},
		};

		files = new List<FileSimplified>()
		{
			new FileSimplified()
			{
				zeroBasedIndexNumber = 0,
				IsSecure = true,
				Filename = "nature.jpg",
				Filesize = "234 kB",
				Filetype = "JPEG"
			},
			new FileSimplified()
			{
				zeroBasedIndexNumber = 1,
				IsSecure = false,
				Filename = "cv.docx",
				Filesize = "83 kB",
				Filetype = "Microsoft Word document"
			}
		};

		contacts = new List<ContactSimplified>()
		{
			new ContactSimplified()
			{
				zeroBasedIndexNumber = 0,
				IsSecure = true,
				FirstName = "Hanna",
				LastName = "Hard Worker",
				Emails = "hanna@localhost (work)",
				PhoneNumbers = "1-800-123123 (work)"
			},
			new ContactSimplified()
			{
				zeroBasedIndexNumber = 1,
				IsSecure = false,
				FirstName = "Mike",
				LastName = "Madr",
				Emails = "mike@localhost (work)",
				PhoneNumbers = "1-800-123321 (home)"
			}
		};

		paymentCards = new List<PaymentCardSimplified>()
		{
			new PaymentCardSimplified()
			{
				zeroBasedIndexNumber = 0,
				IsSecure = true,
				Title = "Dragon credit",
				NameOnTheCard = "Dave Dragon",
				CardType = "Credit",
				Number = "4024007105746837",
				SecurityCode = "678"
			},
			new PaymentCardSimplified()
			{
				zeroBasedIndexNumber = 1,
				IsSecure = false,
				Title = "Fire bank",
				NameOnTheCard = "Dave teh Dragon",
				CardType = "Debit",
				Number = "4024007182777473",
				SecurityCode = "599"
			}
		};

		visibleElement = VisibleElement.ShowLoginInformations;
	}

	private void ShowPasswordCreators(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowPasswordCreators;
	}

	private void BackFromPasswordCreators(MouseEventArgs e)
	{
		visibleElement = VisibleElement.NewAndOpenWizard;
	}

	// Create new common secrets container
	private void CancelNewCommonSecretsContainerCreation(MouseEventArgs e)
	{
		visibleElement = VisibleElement.NewAndOpenWizard;
	}

	private async Task CreateNewCommonSecretsContainer(KdfeAndPassword kdfeAndPassword)
	{
		this.derivedPasswords.Clear();
		this.derivedPasswords[kdfeAndPassword.kdfe.GetKeyIdentifier()] = await kdfeAndPassword.kdfe.GeneratePasswordBytesAsync(kdfeAndPassword.password, securityAsyncFunctions);

		this.csc = new CommonSecretsContainer(kdfeAndPassword.kdfe);

		this.isModified = true;

		visibleElement = VisibleElement.ShowLoginInformations;
	}

	private List<string> GetKeyIdentifiers()
	{
		return new List<string>() { "test" };
	}

	// TopNav actions
	private void TopNavShowLoginInformations(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowLoginInformations;
	}

	private void TopNavShowNotes(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowNotes;
	}

	private void TopNavShowFiles(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowFiles;
	}

	private void TopNavShowContacts(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowContacts;
	}

	private void TopNavShowPaymentCards(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowPaymentCards;
	}

	// Add, edit or delete login information
	private void ShowAddLoginInformation(MouseEventArgs e)
	{
		visibleElement = VisibleElement.AddLoginInformation;
	}

	private void AddLoginInformation(LoginSimplified newLogin)
	{
		logins.Add(newLogin);
		visibleElement = VisibleElement.ShowLoginInformations;
	}

	private void CancelAddLoginInformation(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowLoginInformations;
	}

	private void DeleteLoginInformationConfirmation(int zeroBasedIndexNumber)
	{
		deleteActualAction = DeleteLoginInformationActual;
		deleteCancelAction = DeleteLoginInformationCancel;
		deleteIndex = zeroBasedIndexNumber;
		whatToDelete = $"Login information with title '{logins[zeroBasedIndexNumber].Title}'";
		//deleteType = ItemType.LoginInformation;
		visibleElement = VisibleElement.DeleteItemConfirmation;
	}

	private void DeleteLoginInformationCancel(MouseEventArgs e)
	{
		ResetDelete();
		visibleElement = VisibleElement.ShowLoginInformations;
	}

	private void DeleteLoginInformationActual(MouseEventArgs e)
	{
		if (-1 < deleteIndex && deleteIndex < logins.Count)
		{
			logins.RemoveAt(deleteIndex);
		}
		ResetDelete();
		visibleElement = VisibleElement.ShowLoginInformations;
	}

	// Add, edit or delete note
	private void ShowAddNote(MouseEventArgs e)
	{
		visibleElement = VisibleElement.AddNote;
	}

	private void AddNote(Note newNote)
	{
		this.csc.notes.Add(newNote);
		this.isModified = true;
		visibleElement = VisibleElement.ShowNotes;
	}

	private void EditedNote()
	{
		this.isModified = true;
		visibleElement = VisibleElement.ShowNotes;
	}

	private void CancelAddNote(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowNotes;
	}

	private void DeleteNoteConfirmation(int zeroBasedIndexNumber)
	{
		deleteActualAction = DeleteNoteActual;
		deleteCancelAction = DeleteNoteCancel;
		deleteIndex = zeroBasedIndexNumber;
		whatToDelete = $"Note with title '{this.csc.notes[zeroBasedIndexNumber].GetNoteTitle()}'";
		//deleteType = ItemType.Note;
		visibleElement = VisibleElement.DeleteItemConfirmation;
	}

	private void DeleteNoteCancel(MouseEventArgs e)
	{
		ResetDelete();
		visibleElement = VisibleElement.ShowNotes;
	}

	private void DeleteNoteActual(MouseEventArgs e)
	{
		if (-1 < deleteIndex && deleteIndex < this.csc.notes.Count)
		{
			this.csc.notes.RemoveAt(deleteIndex);
		}
		ResetDelete();
		visibleElement = VisibleElement.ShowNotes;
	}

	// Add, edit or delete file
	private void ShowAddFile(MouseEventArgs e)
	{
		visibleElement = VisibleElement.AddFile;
	}

	private void AddFile(FileSimplified newFile)
	{
		files.Add(newFile);
		visibleElement = VisibleElement.ShowFiles;
	}

	private void CancelAddFile(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowFiles;
	}

	private void DeleteFileConfirmation(int zeroBasedIndexNumber)
	{
		deleteActualAction = DeleteFileActual;
		deleteCancelAction = DeleteFileCancel;
		deleteIndex = zeroBasedIndexNumber;
		whatToDelete = $"File with filename '{files[zeroBasedIndexNumber].Filename}'";
		//deleteType = ItemType.File;
		visibleElement = VisibleElement.DeleteItemConfirmation;
	}

	private void DeleteFileCancel(MouseEventArgs e)
	{
		ResetDelete();
		visibleElement = VisibleElement.ShowFiles;
	}

	private void DeleteFileActual(MouseEventArgs e)
	{
		if (-1 < deleteIndex && deleteIndex < files.Count)
		{
			files.RemoveAt(deleteIndex);
		}
		ResetDelete();
		visibleElement = VisibleElement.ShowFiles;
	}

	// Add, edit or delete contact
	private void ShowAddContact(MouseEventArgs e)
	{
		visibleElement = VisibleElement.AddContact;
	}

	private void AddContact(ContactSimplified newContact)
	{
		contacts.Add(newContact);
		visibleElement = VisibleElement.ShowContacts;
	}

	private void CancelAddContact(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowContacts;
	}

	private void DeleteContactConfirmation(int zeroBasedIndexNumber)
	{
		deleteActualAction = DeleteContactActual;
		deleteCancelAction = DeleteContactCancel;
		deleteIndex = zeroBasedIndexNumber;
		whatToDelete = $"Contact with name '{contacts[zeroBasedIndexNumber].FirstName} {contacts[zeroBasedIndexNumber].LastName}'";
		//deleteType = ItemType.ContactInformation;
		visibleElement = VisibleElement.DeleteItemConfirmation;
	}

	private void DeleteContactCancel(MouseEventArgs e)
	{
		ResetDelete();
		visibleElement = VisibleElement.ShowContacts;
	}

	private void DeleteContactActual(MouseEventArgs e)
	{
		if (-1 < deleteIndex && deleteIndex < contacts.Count)
		{
			contacts.RemoveAt(deleteIndex);
		}
		ResetDelete();
		visibleElement = VisibleElement.ShowContacts;
	}

	// Add, edit or delete  payment card
	private void ShowAddPaymentCard(MouseEventArgs e)
	{
		visibleElement = VisibleElement.AddPaymentCard;
	}

	private void AddPaymentCard(PaymentCardSimplified newPaymentCard)
	{
		paymentCards.Add(newPaymentCard);
		visibleElement = VisibleElement.ShowPaymentCards;
	}

	private void CancelAddPaymentCard(MouseEventArgs e)
	{
		visibleElement = VisibleElement.ShowPaymentCards;
	}

	private void DeletePaymentCardConfirmation(int zeroBasedIndexNumber)
	{
		deleteActualAction = DeletePaymentCardActual;
		deleteCancelAction = DeletePaymentCardCancel;
		deleteIndex = zeroBasedIndexNumber;
		whatToDelete = $"Payment card with title '{paymentCards[zeroBasedIndexNumber].Title}'";
		//deleteType = ItemType.PaymentCard;
		visibleElement = VisibleElement.DeleteItemConfirmation;
	}

	private void DeletePaymentCardCancel(MouseEventArgs e)
	{
		ResetDelete();
		visibleElement = VisibleElement.ShowPaymentCards;
	}

	private void DeletePaymentCardActual(MouseEventArgs e)
	{
		if (-1 < deleteIndex && deleteIndex < paymentCards.Count)
		{
			paymentCards.RemoveAt(deleteIndex);
		}
		ResetDelete();
		visibleElement = VisibleElement.ShowPaymentCards;
	}

	// Delete common
	private void ResetDelete()
	{
		deleteActualAction = null;
		deleteCancelAction = null;
		deleteIndex = -1;
		deleteType = ItemType.None;
		whatToDelete = "";
	}
}